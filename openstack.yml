- name : Configure Openstack For Avi Controller
  hosts: localhost
  connection: local
  gather_facts: no

  vars_files:
    - "vars/data.yml"

  tasks:

    - name: Create External Network
      os_network:
        state: present
        name: "{{ openstack.networks.external.name | default('net-ext') }}"
        external: true
        shared: true
        provider_network_type : "{{ openstack.networks.external.provider_network_type | default('flat') }}"
        provider_physical_network: "{{ openstack.networks.external.provider_physical_network | default('physnet1') }}"
      tags:
        - network

    - name: Create External Subnet
      os_subnet:
        state: present
        network_name: "{{ openstack.networks.external.name | default('net-ext') }}"
        name: "{{ openstack.networks.external.subnet | default('subnet-ext') }}"
        cidr: "{{ openstack.networks.external.cidr }}" # needs to come from TF
        enable_dhcp: "{{ openstack.networks.external.enable_dhcp | default('false') }}"
        allocation_pool_start: "{{ openstack.networks.external.cidr | next_nth_usable(openstack.networks.external.allocation_pool_start | int) }}" # needs to come from TF
        allocation_pool_end: "{{ openstack.networks.external.cidr | next_nth_usable(openstack.networks.external.allocation_pool_end| int) }}" # needs to come from TF
      when:
        - openstack.networks.external.cidr is defined
        - openstack.networks.external.allocation_pool_start is defined
        - openstack.networks.external.allocation_pool_end is defined
      tags:
        - subnet
        - network

    - name: Create new project for Avi Control Plane
      os_project:
        state: present
        name: "{{ openstack.project.name | default('projectAvi') }}"
        description: "{{ openstack.project.description | default('Avi Controller Project') }}"
        enabled: True
        domain_id: "{{ openstack.domain | default('default') }}"
      tags:
        - project

    - name: Grant an admin role for user in the new project
      os_user_role:
        user: "{{ openstack.project.user | default('admin') }}"
        role: "{{ openstack.project.role | default('admin') }}"
        project: "{{ openstack.project.name | default('projectAvi') }}"
      tags:
        - project

    - name: set new env variable with new project
      set_fact:
        OpenStackEnvAvi:
          OS_AUTH_URL: "{{ lookup('env','OS_AUTH_URL') }}"
          OS_ENDPOINT_TYPE: "{{ lookup('env','OS_ENDPOINT_TYPE') }}"
          OS_AUTH_PLUGIN: "{{ lookup('env','OS_AUTH_PLUGIN') }}"
          OS_REGION_NAME: "{{ lookup('env','OS_REGION_NAME') }}"
          OS_PROJECT_NAME: "{{ openstack.project.name | default('projectAvi') }}"
          OS_PROJECT_DOMAIN_NAME: "{{ lookup('env','OS_PROJECT_DOMAIN_NAME') }}"
          OS_USER_DOMAIN_NAME: "{{ lookup('env','OS_USER_DOMAIN_NAME') }}"
          OS_IDENTITY_API_VERSION: "{{ lookup('env','OS_IDENTITY_API_VERSION') }}"
          OS_TENANT_NAME: "{{ lookup('env','OS_TENANT_NAME') }}"
          OS_INTERFACE: "{{ lookup('env','OS_INTERFACE') }}"
          OS_PASSWORD: "{{ lookup('env','OS_PASSWORD') }}"
          OS_USERNAME: "{{ lookup('env','OS_USERNAME') }}"

    - name: Create Networks for Avi
      os_network:
        state: present
        name: "{{ item.name }}"
        external: "{{ item.external | default('false') }}"
        shared: "{{ item.shared | default('false') }}"
      environment: "{{ OpenStackEnvAvi }}"
      loop: "{{ openstack.networks.internal }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - openstack.networks.internal is defined
      tags:
        - network

    - name: Create OpenStack Subnets for Avi
      os_subnet:
        state: present
        network_name: "{{ item.name }}"
        name: "{{ item.subnet }}"
        cidr: "{{ item.cidr }}"
      environment: "{{ OpenStackEnvAvi }}"
      loop: "{{ openstack.networks.internal }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - openstack.networks.internal is defined
      tags:
        - subnet
        - network

    - name: Create an OpenStack router for Avi
      os_router:
        state: present
        name: "{{ openstack.router.name | default('router-avi') }}"
        network: "{{ openstack.networks.external.name | default('net-ext') }}"
        interfaces: "{{ openstack.router.interfaces }}"
      environment: "{{ OpenStackEnvAvi }}"
      when:
        - openstack.router is defined
      tags:
        - router
        - network
        - subnet

    - name: Create New security Group
      os_security_group:
        state: present
        name: "{{ item.name }}"
        description: "{{ item.description }}"
      environment: "{{ OpenStackEnvAvi }}"
      loop: "{{ securityGroups }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - securityGroups is defined
      tags:
        - securitygroup

    - name: Adding rule Ingress
      os_security_group_rule:
        direction: ingress
        security_group: "{{ item.0.name }}"
        protocol: "{{ item.1.protocol }}"
        port_range_min: "{{ item.1.port_range_min }}"
        port_range_max: "{{ item.1.port_range_max }}"
        remote_ip_prefix: "{{ item.1.remote_ip_prefix }}"
      environment: "{{ OpenStackEnvAvi }}"
      with_subelements:
        - "{{ securityGroups }}"
        - rules
      loop_control:
        label: "{{ item.0.name }}"
      when:
        - securityGroups is defined
      tags:
        - securitygroup

    - name: Create OpenStack Ssh key(s)
      os_keypair:
        state: present
        name: "{{ item.name | default('keyPairsAviController') }}"
        public_key_file: "{{ item.public_key_file }}"
      environment: "{{ OpenStackEnvAvi }}"
      loop: "{{ openstack.key }}"
      loop_control:
        label: "{{ item.name }}"
      when: openstack.key is defined
      tags:
        - ssh
        - aviOsController

    - name: Uploading glance image(s)
      os_image:
        name: "{{ item.name }}"
        container_format: "{{ item.container_format | default('bare') }}"
        disk_format: "{{ item.disk_format | default('qcow2') }}"
        state: present
        filename: "{{ item.fileName }}"
      environment: "{{ OpenStackEnvAvi }}"
      loop: "{{ openstack.glance }}"
      loop_control:
        label: "{{ item.name }}"
      when: openstack.glance is defined
      tags:
        - image
        - glance

    - name: Create Flavor for Avi Control Plane
      os_nova_flavor:
        state: present
        name: "{{ item.name }}"
        ram: "{{ item.ram }}"
        vcpus: "{{ item.vcpus }}"
        disk: "{{ item.disk }}"
      environment: "{{ OpenStackEnvAvi }}"
      loop: "{{ flavor }}"
      loop_control:
        label: "{{ item.name }}"
      when: flavor is defined
      tags:
        - flavor
        - nova

    - name: Create Neutron Port for fixed IP address for Avi controller(s)
      os_port:
        state: present
        name: "{{ 'aviPort-%1x' | format(item.0) }}"
        network: "{{ avi_controller.network }}"
        fixed_ips:
          - ip_address: "{{ item.1 }}"
        security_groups: "{{ avi_controller.securitygroup }}"
      loop: "{{ range(0, avi_controller.Ips | length , 1) | zip(avi_controller.Ips) | list }}"
      when:
        - avi_controller is defined
      environment: "{{ OpenStackEnvAvi }}"
      tags:
        - neutron

    - name: Gather facts about a previously created image
      os_image_info:
        image: "{{ avi_controller.image }}"
      register: image
      environment: "{{ OpenStackEnvAvi }}"


#    - name: Gather facts about previously created networks
#      os_networks_facts:
#        name: "{{ avi_controller.network }}"
#      environment: "{{ OpenStackEnvAvi }}"

    - name: Gather facts about previously created flavor
      os_flavor_info:
        name: "{{ avi_controller.flavor }}"
      register: flavors
      environment: "{{ OpenStackEnvAvi }}"

    - name: Gather facts about neutron ports
      os_port_info:
        port: avi*
      register: ports
      environment: "{{ OpenStackEnvAvi }}"

    - name: Create a new instance for Avi controller
      os_server:
        state: present
        name: "{{ avi_controller.name'-%1x' | format(item.0) }}"
        image: "{{ image.openstack_image.id }}"
        timeout: 300
        key_name: "{{ avi_controller.key }}"
        floating_ip_pools: "{{ openstack.networks.external.name | default('net-ext') }}"
        flavor: "{{ flavors.openstack_flavors.0.id }}"
        nics:
          - port-id: "{{ item.1.id }}"
        meta:
          hostname: "{{ avi_controller.name'-%1x' | format(item.0) }}"
      with_nested:
        - "{{ range(0, avi_controller.Ips | length , 1) | list }}"
        - "{{ ports.openstack_ports }}"
      loop_control:
        label: "{{ item.0.name }}"
      when:
        - avi_controller is defined
        - item.1.name == 'aviPort-%1x' | format(item.0)
      environment: "{{ OpenStackEnvAvi }}"
      tags:
        - nova